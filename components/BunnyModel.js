/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";
import { AnimationMixer, LoopOnce } from "three";
import { useSpring, animated } from "@react-spring/three";

export default function Model(props) {
  const group = useRef();
  const sphere = useRef();
  const mesh = useRef();
  const { nodes, materials, animations, scene } = useGLTF(
    "/bunny2_animation.glb"
  );
  const { actions, mixer } = useAnimations(animations, group);
  const { viewport } = useThree();
  const [hover, setHover] = useState(false);
  const [reset, setReset] = useState(false);
  var passedTime = 0;
  var move = false;

  // const [spring, api] = useSpring(
  //   () => ({ scale: 0, config: { mass: 2, tension: 300 }, delay: 2000 }),
  //   []
  // );
  const styles = useSpring({
    from: { scale: 0 },
    to: { scale: 1 },
    delay: 500,
    config: { mass: 1, tension: 200 },
  });

  useEffect(() => {
    // api.start({ scale: 1 });
    let timeout;
    const smoke = () => {
      Object.entries(actions).map(([key, value]) => {
        value.reset();
        value.setLoop(LoopOnce);
        value.play();
      });
      timeout = setTimeout(smoke, 1000 * 5);
    };

    smoke();
    return () => {
      clearTimeout(timeout);
    };
  }, []);

  useFrame((state, delta) => {
    if (hover && !reset) {
      setReset(true);
      passedTime = 0;
    } else if (hover) {
      passedTime += 0.01;
    }
    if (hover && passedTime % (Math.PI / 2) <= 0.01) {
      move = !move;
    }
    mesh.current.rotation.z +=
      Math.sin(passedTime * 4) * (hover ? 0.005 : 0) * move;
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" position={[0, -1.5, 1]} scale={viewport.width / 6}>
        <mesh
          ref={sphere}
          name="Icosphere"
          castShadow
          receiveShadow
          geometry={nodes.Icosphere.geometry}
          material={materials["coffeesmoke-mat"]}
          position={[0.32, 1.08, 0.6]}
          scale={0}
        />
        <mesh
          name="Icosphere001"
          castShadow
          receiveShadow
          geometry={nodes.Icosphere001.geometry}
          material={materials["coffeesmoke-mat"]}
          position={[0.31, 1.07, 0.59]}
          scale={0}
        />
        <mesh
          name="Icosphere003"
          castShadow
          receiveShadow
          geometry={nodes.Icosphere003.geometry}
          material={materials["coffeesmoke-mat"]}
          position={[0.24, 1.08, 0.64]}
          rotation={[0, 0, -0.94]}
          scale={0}
        />
        <mesh
          ref={mesh}
          castShadow
          receiveShadow
          geometry={nodes.Bunny_Scene.geometry}
          material={materials.palette}
          rotation={[Math.PI / 2, 0, 0]}
          onPointerOver={(e) => setHover(true)}
          onPointerLeave={(e) => {
            setHover(false);
            setReset(false);
            move = false;
            mesh.current.rotation.z = 0;
          }}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/bunny2_animation.glb");
